{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCGA,IAAM,EAAQ,AADA,SAAS,aAAa,CAAC,SACjB,aAAa,CAAC,SAC5B,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAe,SAAS,aAAa,CAAC,kBAEtC,EAAU,CACd,aAuBF,WAEE,IAAM,EAAY,AADF,EAAM,gBAAgB,CACZ,SAAS,CAAC,CAAA,GAEpC,EAAM,WAAW,CAAC,GAClB,GACF,EA5BE,aA8BF,WACE,EAAM,gBAAgB,CAAC,MAAM,GAC7B,GACF,EAhCE,gBAyCF,WACE,EAAG,OAAO,CAAC,SAAC,CAAZ,EAGE,IAAM,EAAY,AAFD,EAAG,gBAAgB,CAET,SAAS,CAAC,CAAA,GAErC,EAAG,WAAW,CAAC,EACjB,GAEA,GACF,EAlDE,gBAoDF,WACE,EAAG,OAAO,CAAC,SAAC,CAAZ,EACE,EAAG,gBAAgB,CAAC,MAAM,EAC5B,GAEA,GACF,CAzDA,EAEM,EAAK,EAAM,gBAAgB,CAAC,MAMlC,SAAS,EAAkB,CAAK,EAC9B,IAAM,EAAS,EAAM,MAAM,CAAC,SAAS,CAEhC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAiC,OAAO,OAAO,CAAC,EAAA,CAAA,OAAA,QAAA,CAAA,GAAhD,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,I,EAAA,G,EAAA,EAAA,KAAA,C,A,S,C,E,G,M,O,C,G,O,C,E,I,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,AAAA,I,E,M,E,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,EAAA,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,EAAA,G,E,EAAA,I,A,W,M,A,U,6I,KAAO,EAAA,CAAA,CAAA,EAAA,CAAW,EAAlB,CAAA,CAAA,EAAA,CACH,GAAI,EAAO,QAAQ,CAAC,GAAY,CAC9B,IACA,KACF,C,C,C,M,E,CAJG,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAMP,CAeA,SAAS,IACP,IAAM,EAAW,EAAM,QAAQ,CAAC,MAAM,AAEtC,CAAA,EAAU,QAAQ,CAAG,GAAY,GACjC,EAAU,QAAQ,CAAG,GAAY,CACnC,CAsBA,SAAS,IACP,IAAM,EAAc,CAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,AAEzC,CAAA,EAAa,QAAQ,CAAG,GAAe,GACvC,EAAa,QAAQ,CAAG,GAAe,CACzC,CA5DA,SAAS,gBAAgB,CAAC,WAAW,OAAO,CAAC,SAAC,CAA9C,EACE,EAAO,gBAAgB,CAAC,QAAS,EACnC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar tbody = table.querySelector(\"tbody\");\nvar rowAppend = document.querySelector(\".append-row\");\nvar rowRemove = document.querySelector(\".remove-row\");\nvar columnAppend = document.querySelector(\".append-column\");\nvar columnRemove = document.querySelector(\".remove-column\");\nvar actions = {\n    \"append-row\": appendRow,\n    \"remove-row\": removeRow,\n    \"append-column\": appendColumn,\n    \"remove-column\": removeColumn\n};\nvar tr = tbody.querySelectorAll(\"tr\");\ndocument.querySelectorAll(\".button\").forEach(function(button) {\n    button.addEventListener(\"click\", handleButtonClick);\n});\nfunction handleButtonClick(event) {\n    var action = event.target.classList;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = Object.entries(actions)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = _sliced_to_array(_step.value, 2), className = _step_value[0], actionFunc = _step_value[1];\n            if (action.contains(className)) {\n                actionFunc();\n                break;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction appendRow() {\n    var lastRow = tbody.lastElementChild;\n    var clonedRow = lastRow.cloneNode(true);\n    tbody.appendChild(clonedRow);\n    checkrows();\n}\nfunction removeRow() {\n    tbody.lastElementChild.remove();\n    checkrows();\n}\nfunction checkrows() {\n    var rowCount = tbody.children.length;\n    rowAppend.disabled = rowCount >= 10;\n    rowRemove.disabled = rowCount <= 2;\n}\nfunction appendColumn() {\n    tr.forEach(function(el) {\n        var lastCell = el.lastElementChild;\n        var cloneCell = lastCell.cloneNode(true);\n        el.appendChild(cloneCell);\n    });\n    checkColumn();\n}\nfunction removeColumn() {\n    tr.forEach(function(el) {\n        el.lastElementChild.remove();\n    });\n    checkColumn();\n}\nfunction checkColumn() {\n    var columnCount = tr[0].children.length;\n    columnAppend.disabled = columnCount >= 10;\n    columnRemove.disabled = columnCount <= 2;\n}\n\n//# sourceMappingURL=index.dfe8e7b0.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst tbody = table.querySelector('tbody');\nconst rowAppend = document.querySelector('.append-row');\nconst rowRemove = document.querySelector('.remove-row');\nconst columnAppend = document.querySelector('.append-column');\nconst columnRemove = document.querySelector('.remove-column');\n\nconst actions = {\n  'append-row': appendRow,\n  'remove-row': removeRow,\n  'append-column': appendColumn,\n  'remove-column': removeColumn,\n};\n\nconst tr = tbody.querySelectorAll('tr');\n\ndocument.querySelectorAll('.button').forEach((button) => {\n  button.addEventListener('click', handleButtonClick);\n});\n\nfunction handleButtonClick(event) {\n  const action = event.target.classList;\n\n  for (const [className, actionFunc] of Object.entries(actions)) {\n    if (action.contains(className)) {\n      actionFunc();\n      break;\n    }\n  }\n}\n\nfunction appendRow() {\n  const lastRow = tbody.lastElementChild;\n  const clonedRow = lastRow.cloneNode(true);\n\n  tbody.appendChild(clonedRow);\n  checkrows();\n}\n\nfunction removeRow() {\n  tbody.lastElementChild.remove();\n  checkrows();\n}\n\nfunction checkrows() {\n  const rowCount = tbody.children.length;\n\n  rowAppend.disabled = rowCount >= 10;\n  rowRemove.disabled = rowCount <= 2;\n}\n\nfunction appendColumn() {\n  tr.forEach((el) => {\n    const lastCell = el.lastElementChild;\n\n    const cloneCell = lastCell.cloneNode(true);\n\n    el.appendChild(cloneCell);\n  });\n\n  checkColumn();\n}\n\nfunction removeColumn() {\n  tr.forEach((el) => {\n    el.lastElementChild.remove();\n  });\n\n  checkColumn();\n}\n\nfunction checkColumn() {\n  const columnCount = tr[0].children.length;\n\n  columnAppend.disabled = columnCount >= 10;\n  columnRemove.disabled = columnCount <= 2;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","tbody","table","document","querySelector","rowAppend","rowRemove","columnAppend","columnRemove","actions","clonedRow","lastRow","lastElementChild","cloneNode","appendChild","checkrows","remove","tr","forEach","el","cloneCell","lastCell","checkColumn","querySelectorAll","handleButtonClick","event","action","target","classList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Object","entries","Symbol","iterator","next","done","_step_value","value","_array_with_holes","isArray","_iterable_to_array_limit","_s","_e","_i","_arr","_n","_d","call","push","err","_unsupported_iterable_to_array","o","minLen","n","prototype","toString","slice","constructor","name","from","test","_non_iterable_rest","TypeError","className","actionFunc","contains","return","rowCount","children","disabled","columnCount","button","addEventListener"],"version":3,"file":"index.dfe8e7b0.js.map"}